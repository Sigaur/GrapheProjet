#include "calendrierTot.h"

calendrierTot::calendrierTot()
{
    std::vector <bool> temp;
    for(int i = 0; i < 1129; i++)
    {
        temp.push_back(false);
    }

    m_temps = 11;
    m_nSommets = m_graphe.getSommets();
    for (int i = 0; i < m_nSommets; i++)
    {
        affichageTab.push_back(temp);
        /*for (int j = 0; j < m_temps; j++)
        {
            affichageTab[i][j] = false;
        }
        */
    }
}

void calendrierTot::lireOrdo()
{
    m_nSommets = m_graphe.getSommets();
    std::vector <bool> temp;
    for(int i = 0; i < 1129; i++)
    {
        temp.push_back(false);
    }
    for (int i = 0; i < m_nSommets; i++)
    {
        affichageTab.push_back(temp);
        /*for (int j = 0; j < m_temps; j++)
        {
            affichageTab[i][j] = false;
        }
        */
    }
    for(int i = 1; i < m_nSommets; i++)
    {
        tachesRestantes.push_back(i);
    }
}

void calendrierTot::tabOrdonnancement()
{
    m_graphe.lecture();
    m_graphe.grapheO();
    m_graphe.testAZ();
    m_graphe.graphe();
    //m_graphe.~Graphe();
}

void calendrierTot::update()
{
    testTachesRestantes();
    std::cout<<"Trace1";
    updateTachesExec();

    m_temps ++;
    if(tachesRestantes.size() == 0 && tachesExecutions.size() == 0)
    {
        this->affichage();
    }
    else
    {
        this->update();
    }
}

void calendrierTot::testTachesRestantes()
{
    int numTacheTemp;
    bool executionPossible;
    int contrainteTemp;

    for (int i = 0; i < tachesRestantes.size(); i++)
    {
        if(tachesRestantes[i] != 0)
        {
            numTacheTemp = tachesRestantes[i];//recuperation d une tache restante
            executionPossible = true;
        }
        else
        {
            executionPossible = false;
        }

        for (int j = 1; j < m_nSommets; j++)
        {
            contrainteTemp = m_graphe.m_DefTabDuree[numTacheTemp][j];
            if(contrainteTemp != 0)
            {
                if(! tacheEstFinit(j))
                {
                    executionPossible = false;
                }
            }
        }

        if (executionPossible)
        {
            debutTache(i);
            i = 0;//remise a zero
            std::cout<<"TRACE";
        }
    }
    std::cout<<"TRACE";
}

bool calendrierTot::tacheEstFinit(int tache)
{
    bool estFinie = false;
    for (int i = 0; i < tachesFinies.size(); i++)
    {
        if (tachesFinies[i] == tache)
        {
            estFinie = true;
        }
    }
    return estFinie;
}

void calendrierTot::debutTache(int tache)
{
    int positionTache;
    std::vector <int> nouvelleColonne;


    //Suppression du tableau tachesRestantes
    for (int i = 0; i < tachesRestantes.size(); i++)
    {
        if (tachesRestantes[i] == tache)
        {
            //positionTache = i;
            tachesRestantes[i] = 0;
        }
    }
    //tachesFinies.erase(tachesRestantes.begin() + positionTache);

    //Ajout dans le Tableau Taches Executions
    nouvelleColonne.push_back(tache);
    nouvelleColonne.push_back(m_graphe.m_durees[tache]);
    tachesExecutions.push_back(nouvelleColonne);

    //Ecriture dans le tableau affichage
    for (int i = 0; i < m_graphe.m_durees[tache]; i++)
    {
        affichageTab[tache][i] = true;
    }

}

void calendrierTot::updateTachesExec()
{
    for (int i = 0; i < tachesExecutions.size(); i++)
    {
        tachesExecutions[i][1] --;
        if (tachesExecutions[i][1] <= 0)
        {
            finTache(i);
        }
    }
}

void calendrierTot::finTache(int tache)
{
    int positionTache;
    //Suppression du tableau tachesExecutions
    for (int i = 0; i < tachesExecutions.size(); i++)
    {
        if (tachesExecutions[i][0] == tache)
        {
            positionTache = i;
        }
    }
    tachesExecutions.erase(tachesExecutions.begin() + positionTache);

    //Ajout dans le vector taches finies
    tachesFinies.push_back(tache);
}

void calendrierTot::affichage()
{
    char numTache;
    for (int i = 0; i <= (2 * m_temps); i++)
    {
        if(i == 0)
            std::cout << " ";
        else if (i%2 == 0)
            std::cout << " ";
        else
            std::cout << (i - 1)/2;
    }
    std::cout << std::endl;

    for (int i = 0; i < m_nSommets; i++)
    {
        numTache = 65 + i;
        std::cout << numTache;

        for (int j = 0; j < (2 * m_temps); j++)
        {
            if(j%2 == 0)
                std::cout << "|";
            else if(affichageTab[i][j/2])
                std::cout << "=";
            else
                std::cout << " ";
        }
        std::cout << std::endl;
    }
}

calendrierTot::~calendrierTot()
{
    //dtor
}
